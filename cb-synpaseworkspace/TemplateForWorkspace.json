{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"workspaceName": {
			"type": "string",
			"metadata": "Workspace name",
			"defaultValue": "cb-synpaseworkspace"
		},
		"cb-synpaseworkspace-WorkspaceDefaultSqlServer_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'cb-synpaseworkspace-WorkspaceDefaultSqlServer'",
			"defaultValue": "Integrated Security=False;Encrypt=True;Connection Timeout=30;Data Source=tcp:cb-synpaseworkspace.sql.azuresynapse.net,1433;Initial Catalog=@{linkedService().DBName}"
		},
		"ls_BABSData_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'ls_BABSData'"
		},
		"cb-synpaseworkspace-WorkspaceDefaultStorage_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://cbrau2usynapsestorage.dfs.core.windows.net"
		}
	},
	"variables": {
		"workspaceId": "[concat('Microsoft.Synapse/workspaces/', parameters('workspaceName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('workspaceName'), '/BabsPool')]",
			"type": "Microsoft.Synapse/workspaces/sqlPools",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/u2ulabpool')]",
			"type": "Microsoft.Synapse/workspaces/bigDataPools",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/CalculateTripsPerStation')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "CalculateTripsPerStation",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_TripsPerStation",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"SourceTripData": {},
									"AggDestination": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-07-05T07:50:05Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/df_TripsPerStation')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Copy Small BABS Files')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Get Metadata1",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ds_ListOfBABSDataFiles",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "BinaryReadSettings"
							}
						}
					},
					{
						"name": "Loop Over BABS Files",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Metadata1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Metadata1').output.childItems",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Get Size of Current File",
									"type": "GetMetadata",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "ds_currentBABSFile",
											"type": "DatasetReference",
											"parameters": {
												"FileName": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										},
										"fieldList": [
											"size"
										],
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										},
										"formatSettings": {
											"type": "BinaryReadSettings"
										}
									}
								},
								{
									"name": "Check for small files",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Get Size of Current File",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@less(activity('Get Size of Current File').output.size,50000000)",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "Copy small BABS file",
												"type": "Copy",
												"dependsOn": [],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "BinarySource",
														"storeSettings": {
															"type": "AzureBlobStorageReadSettings",
															"recursive": true
														},
														"formatSettings": {
															"type": "BinaryReadSettings"
														}
													},
													"sink": {
														"type": "BinarySink",
														"storeSettings": {
															"type": "AzureBlobFSWriteSettings"
														}
													},
													"enableStaging": false
												},
												"inputs": [
													{
														"referenceName": "ds_currentBABSFile",
														"type": "DatasetReference",
														"parameters": {
															"FileName": {
																"value": "@item().name",
																"type": "Expression"
															}
														}
													}
												],
												"outputs": [
													{
														"referenceName": "Binary1",
														"type": "DatasetReference",
														"parameters": {}
													}
												]
											}
										]
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-07-04T14:42:18Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/ds_ListOfBABSDataFiles')]",
				"[concat(variables('workspaceId'), '/datasets/ds_currentBABSFile')]",
				"[concat(variables('workspaceId'), '/datasets/Binary1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/CopyBabsStationToRaw')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Copy_syr",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "u2ulabs/data/babs/201508_station_data.csv"
							},
							{
								"name": "Destination",
								"value": "datalake/RAW/BABS/Station/"
							}
						],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": false,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings",
									"skipLineCount": 0
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"validateDataConsistency": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "SourceDataset_syr",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DestinationDataset_syr",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-07-04T14:42:28Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/SourceDataset_syr')]",
				"[concat(variables('workspaceId'), '/datasets/DestinationDataset_syr')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/CopyBabsStatusToRaw')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Copy_9tz",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "u2ulabs/data/babs/status_data_2015.csv.gz"
							},
							{
								"name": "Destination",
								"value": "datalake/RAW/BABS/Status/"
							}
						],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings",
									"skipLineCount": 0
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"validateDataConsistency": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "SourceDataset_9tz",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DestinationDataset_9tz",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-07-04T14:42:45Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/SourceDataset_9tz')]",
				"[concat(variables('workspaceId'), '/datasets/DestinationDataset_9tz')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/CopyBabsTripToRaw')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Copy_ngx",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "u2ulabs/data/babs/201508_trip_data.csv"
							},
							{
								"name": "Destination",
								"value": "datalake/RAW/BABS/Trip/"
							}
						],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings",
									"skipLineCount": 0
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"validateDataConsistency": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "SourceDataset_ngx",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DestinationDataset_ngx",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-07-04T14:42:56Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/SourceDataset_ngx')]",
				"[concat(variables('workspaceId'), '/datasets/DestinationDataset_ngx')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Binary1')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "cb-synpaseworkspace-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "RAW/BABS/SmallFiles",
						"fileSystem": "datalake"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/cb-synpaseworkspace-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DestinationDataset_9tz')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "cb-synpaseworkspace-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "RAW/BABS/Status",
						"fileSystem": "datalake"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/cb-synpaseworkspace-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DestinationDataset_ngx')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "cb-synpaseworkspace-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "RAW/BABS/Trip",
						"fileSystem": "datalake"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/cb-synpaseworkspace-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DestinationDataset_syr')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "cb-synpaseworkspace-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "RAW/BABS/Station",
						"fileSystem": "datalake"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/cb-synpaseworkspace-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SourceDataset_9tz')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_BABSData",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "status_data_2015.csv.gz",
						"folderPath": "data/babs",
						"container": "u2ulabs"
					},
					"columnDelimiter": ",",
					"rowDelimiter": "\n",
					"compressionCodec": "gzip",
					"compressionLevel": "Fastest",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "station_id",
						"type": "String"
					},
					{
						"name": "bikes_available",
						"type": "String"
					},
					{
						"name": "docks_available",
						"type": "String"
					},
					{
						"name": "time",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/ls_BABSData')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SourceDataset_ngx')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_BABSData",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "201508_trip_data.csv",
						"folderPath": "data/babs",
						"container": "u2ulabs"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Trip ID",
						"type": "String"
					},
					{
						"name": "Duration",
						"type": "String"
					},
					{
						"name": "Start Date",
						"type": "String"
					},
					{
						"name": "Start Station",
						"type": "String"
					},
					{
						"name": "Start Terminal",
						"type": "String"
					},
					{
						"name": "End Date",
						"type": "String"
					},
					{
						"name": "End Station",
						"type": "String"
					},
					{
						"name": "End Terminal",
						"type": "String"
					},
					{
						"name": "Bike #",
						"type": "String"
					},
					{
						"name": "Subscriber Type",
						"type": "String"
					},
					{
						"name": "Zip Code",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/ls_BABSData')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SourceDataset_syr')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_BABSData",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "201508_station_data.csv",
						"folderPath": "data/babs",
						"container": "u2ulabs"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "station_id",
						"type": "String"
					},
					{
						"name": "name",
						"type": "String"
					},
					{
						"name": "lat",
						"type": "String"
					},
					{
						"name": "long",
						"type": "String"
					},
					{
						"name": "dockcount",
						"type": "String"
					},
					{
						"name": "landmark",
						"type": "String"
					},
					{
						"name": "installation",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/ls_BABSData')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ds_ListOfBABSDataFiles')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_BABSData",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "data/babs",
						"container": "u2ulabs"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/ls_BABSData')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ds_currentBABSFile')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_BABSData",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"FileName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().FileName",
							"type": "Expression"
						},
						"folderPath": "data/babs",
						"container": "u2ulabs"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/ls_BABSData')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/cb-synpaseworkspace-WorkspaceDefaultSqlServer')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"parameters": {
					"DBName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('cb-synpaseworkspace-WorkspaceDefaultSqlServer_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/cb-synpaseworkspace-WorkspaceDefaultStorage')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('cb-synpaseworkspace-WorkspaceDefaultStorage_properties_typeProperties_url')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ls_BABSData')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('ls_BABSData_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AutoResolveIntegrationRuntime')]",
			"type": "Microsoft.Synapse/workspaces/integrationRuntimes",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "AutoResolve",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 0
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/df_TripsPerStation')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "ls_BABSData",
								"type": "LinkedServiceReference"
							},
							"name": "SourceTripData",
							"description": "Import data from ls_BABSData"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "cb-synpaseworkspace-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							},
							"name": "AggDestination"
						}
					],
					"transformations": [
						{
							"name": "GroupOnStartStation",
							"description": "Aggregating data by 'Start Station' producing columns 'Trip Count, Average Duration'"
						},
						{
							"name": "GroupOnEndStation",
							"description": "Aggregating data by 'End Station' producing columns 'Trip Count, Average Duration'"
						},
						{
							"name": "JoinOnStartEndStation"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {Trip ID} as integer,",
						"          Duration as short,",
						"          {Start Date} as timestamp 'MM/dd/yyyy HH:mm',",
						"          {Start Station} as string,",
						"          {Start Terminal} as short,",
						"          {End Date} as timestamp 'MM/dd/yyyy HH:mm',",
						"          {End Station} as string,",
						"          {End Terminal} as short,",
						"          {Bike #} as short,",
						"          {Subscriber Type} as string,",
						"          {Zip Code} as string",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delimited',",
						"     container: 'u2ulabs',",
						"     folderPath: 'data/babs',",
						"     fileName: '201508_trip_data.csv',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true) ~> SourceTripData",
						"SourceTripData aggregate(groupBy({Start Station}),",
						"     {Trip Count} = count({Trip ID}),",
						"          {Average Duration} = avg(Duration)) ~> GroupOnStartStation",
						"SourceTripData aggregate(groupBy({End Station}),",
						"     {Trip Count} = count({Trip ID}),",
						"          {Average Duration} = avg(Duration)) ~> GroupOnEndStation",
						"GroupOnEndStation, GroupOnStartStation join({End Station} == {Start Station},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinOnStartEndStation",
						"JoinOnStartEndStation select(mapColumn(",
						"          Station = {Start Station},",
						"          TripsEndedHere = GroupOnEndStation@{Trip Count},",
						"          AvgDurationEnding = GroupOnEndStation@{Average Duration},",
						"          TripsStartedHere = GroupOnStartStation@{Trip Count},",
						"          AbgDurationStarting = GroupOnStartStation@{Average Duration}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     fileSystem: 'datalake',",
						"     folderPath: 'CURATED/StationAgg',",
						"     compressionCodec: 'snappy',",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> AggDestination"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/ls_BABSData')]",
				"[concat(variables('workspaceId'), '/linkedServices/cb-synpaseworkspace-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/WorkspaceSystemIdentity')]",
			"type": "Microsoft.Synapse/workspaces/credentials",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "ManagedIdentity",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Autonomous Script')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "IF NOT EXISTS (SELECT * FROM sys.external_file_formats WHERE name = 'SynapseDelimitedTextFormat') \n\tCREATE EXTERNAL FILE FORMAT [SynapseDelimitedTextFormat] \n\tWITH ( FORMAT_TYPE = DELIMITEDTEXT ,\n\t       FORMAT_OPTIONS (\n\t\t\t FIELD_TERMINATOR = ',',\n\t\t\t FIRST_ROW = 2,\n\t\t\t USE_TYPE_DEFAULT = FALSE\n\t\t\t))\nGO\n\nIF NOT EXISTS (SELECT * FROM sys.external_data_sources WHERE name = 'datalake_cbrau2usynapsestorage_dfs_core_windows_net') \n\tCREATE EXTERNAL DATA SOURCE [datalake_cbrau2usynapsestorage_dfs_core_windows_net] \n\tWITH (\n\t\tLOCATION = 'abfss://datalake@cbrau2usynapsestorage.dfs.core.windows.net' \n\t)\nGO\n\nCREATE EXTERNAL TABLE dbo.trip_data (\n\t[Trip ID] bigint,\n\t[Duration] bigint,\n\t[Start Date] nvarchar(4000),\n\t[Start Station] nvarchar(4000),\n\t[Start Terminal] bigint,\n\t[End Date] nvarchar(4000),\n\t[End Station] nvarchar(4000),\n\t[End Terminal] bigint,\n\t[Bike #] bigint,\n\t[Subscriber Type] nvarchar(4000),\n\t[Zip Code] bigint\n\t)\n\tWITH (\n\tLOCATION = 'RAW/BABS/SmallFiles/201508_trip_data.csv',\n\tDATA_SOURCE = [datalake_cbrau2usynapsestorage_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseDelimitedTextFormat]\n\t)\nGO\n\n\nSELECT TOP 100 * FROM dbo.trip_data\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "babs",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Azure Synapse Analytics Managed SQL Pools')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "BABS"
				},
				"content": {
					"query": "CREATE MASTER KEY;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Data Warehouse LAB script')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "BABS"
				},
				"content": {
					"query": "CREATE MASTER KEY;\n\nCREATE DATABASE SCOPED CREDENTIAL MyCred\nWITH IDENTITY = 'SHARED ACCESS SIGNATURE',\nSECRET = 'sp=rcwl&st=2023-07-06T12:05:19Z&se=2023-07-06T20:05:19Z&spr=https&sv=2022-11-02&sr=c&sig=EYFfx3giyjjTyaj%2BIL6kvlVvKeZMjHWbPSvOKPTWIDg%3D';\n\nCREATE EXTERNAL DATA SOURCE babsfolder \nWITH\n( TYPE = HADOOP,\nLOCATION\n='wasbs://u2ulabs@cbu2ubabssourcedata.blob.core.windows.net',\nCREDENTIAL = MyCred);\n\nCREATE EXTERNAL FILE FORMAT text_file_format_csv\nWITH\n( FORMAT_TYPE = DELIMITEDTEXT,\nFORMAT_OPTIONS\n(\nFIELD_TERMINATOR =',',\nUSE_TYPE_DEFAULT = TRUE,\nDATE_FORMAT = 'MM/dd/yyyy HH:mm',\nFIRST_ROW = 2 --skip header row\n)\n)\n\nCREATE SCHEMA ext;\nGO\nCREATE EXTERNAL TABLE ext.trips\n(\nTrip_ID INT NOT NULL,\nDuration INT NOT NULL,\nStart_Date DATETIME2(7) NOT NULL,\nStart_Station NVARCHAR(50) NOT NULL,\nStart_Terminal INT NOT NULL,\nEnd_Date DATETIME2(7) NOT NULL,\nEnd_Station NVARCHAR(50) NOT NULL,\nEnd_Terminal INT NOT NULL,\nBike__ INT NOT NULL,\nSubscriber_Type NVARCHAR(50) NOT NULL,\nZip_Code NVARCHAR(50) NULL\n) WITH\n(\nLOCATION = '/data/babs/201508_trip_data.csv',\nDATA_SOURCE = babsfolder,\nFILE_FORMAT = text_file_format_csv\n);\n\nSELECT count(*) as NumberOfTrips\n, AVG(Duration) as AvgDuration\n, Subscriber_type\nFROM ext.trips\nGROUP BY Subscriber_type\n\n\nCREATE EXTERNAL FILE FORMAT text_file_format_csvgz\nWITH\n( FORMAT_TYPE = DELIMITEDTEXT,\nFORMAT_OPTIONS\n(\nFIELD_TERMINATOR =',',\nUSE_TYPE_DEFAULT = TRUE,\nDATE_FORMAT = 'MM/dd/yyyy HH:mm:ss',\nFIRST_ROW = 2 --skip header row\n)\n)\n\n\n\nCREATE EXTERNAL TABLE [ext].[babs_status](\n[station_id] [int] NULL,\n[bikes_available] [int] NULL,\n[docks_available] [int] NULL,\n[time] [datetime] NULL\n) WITH\n(\nLOCATION = '/data/babs/status_data_2015.csv.gz',\nDATA_SOURCE = babsfolder,\nFILE_FORMAT = text_file_format_csvgz\n);\n\nSELECT station_id, COUNT(*) as EmptySlots\nFROM [ext].[babs_status]\nWHERE [bikes_available] = 0\nGROUP BY station_id\nORDER BY 2 desc;\n\nCREATE TABLE dbo.babs_status\nWITH (DISTRIBUTION = ROUND_ROBIN)\nAS SELECT * FROM [ext].[babs_status];\n\nDROP EXTERNAL TABLE ext.babs_status;\nCREATE EXTERNAL TABLE [ext].[babs_status](\n[station_id] [int] NULL,\n[bikes_available] [int] NULL,\n[docks_available] [int] NULL,\n[time] [datetime] NULL\n) WITH\n(\nLOCATION = '/data/babs/status_data_2015.csv.gz',\nDATA_SOURCE = babsfolder,\nFILE_FORMAT = text_file_format_csvgz,\nREJECT_TYPE = value ,\nREJECT_VALUE = 100,\nREJECTED_ROW_LOCATION = '/data/babs/REJECT_Directory'\n);\n\nCREATE TABLE dbo.babs_status\nWITH (DISTRIBUTION = ROUND_ROBIN)\nAS SELECT * FROM ext.babs_status;\n\nCREATE EXTERNAL FILE FORMAT text_file_format\nWITH\n( FORMAT_TYPE = DELIMITEDTEXT,\nFORMAT_OPTIONS\n(\nFIELD_TERMINATOR =',',\nUSE_TYPE_DEFAULT = TRUE,\nSTRING_DELIMITER = '\"',\nFIRST_ROW = 2 --skip header row\n)\n)\n\nselect * from sys.pdw_nodes_column_store_row_groups;\n\nselect distribution_id, sum(total_rows), sum(total_rows) * 100.0 / (SELECT\nsum(total_rows) from sys.pdw_nodes_column_store_row_groups)\nfrom sys.pdw_nodes_column_store_row_groups\ngroup by distribution_id\norder by 2 desc;\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "BabsPool",
						"poolName": "BabsPool"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/My First Query')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "-- This is auto-generated code\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'https://cbu2ubabssourcedata.blob.core.windows.net/u2ulabs/data/babs/201508_station_data.csv',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0'\n    ) AS [result]\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 1')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 2')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "DROP EXTERNAL TABLE dbo.trip_data;\nDROP EXTERNAL DATA SOURCE [datalake_cbrau2usynapsestorage_dfs_core_windows_net];\nDROP EXTERNAL FILE FORMAT [SynapseDelimitedTextFormat];\n\n--Step 1: Create master key for the database\nIF NOT EXISTS(SELECT * FROM sys.symmetric_keys WHERE name LIKE '%DatabaseMasterKey%')\n    CREATE MASTER KEY; \nGO\n\n--Step 2: Create Database Scoped Credentials to access storage account\nIF NOT EXISTS(SELECT * FROM sys.database_credentials WHERE name = 'BabsData')\n    CREATE DATABASE SCOPED CREDENTIAL [BabsData]\nWITH IDENTITY='SHARED ACCESS SIGNATURE',  \nSECRET = 'sp=rcwdl&st=2023-07-06T07:53:13Z&se=2023-07-06T15:53:13Z&spr=https&sv=2022-11-02&sr=c&sig=JpzOPXZyGbHvxIOi3Hke%2Ba5%2F1Dp2dp%2B3pHxajZY70%2Bo%3D'\nGO\n\n--Step 3: \nCREATE EXTERNAL DATA SOURCE SqlOnDemandDemo WITH (\n  LOCATION = 'abfss://datalake@cbrau2usynapsestorage.dfs.core.windows.net',\n  CREDENTIAL = BabsData\n);\n\n-- Step 4: Create External File Format\nIF NOT EXISTS (SELECT * FROM sys.external_file_formats WHERE name = 'SynapseDelimitedTextFormat') \n    CREATE EXTERNAL FILE FORMAT [SynapseDelimitedTextFormat] \n    WITH ( FORMAT_TYPE = DELIMITEDTEXT ,\n           FORMAT_OPTIONS (\n             FIELD_TERMINATOR = ',',\n             USE_TYPE_DEFAULT = FALSE,\n             FIRST_ROW = 2\n            ))\nGO\n\n\nCREATE EXTERNAL TABLE dbo.trip_data (\n    [Trip ID] bigint,\n    [Duration] bigint,\n    [Start Date] nvarchar(4000),\n    [Start Station] nvarchar(4000),\n    [Start Terminal] bigint,\n    [End Date] nvarchar(4000),\n    [End Station] nvarchar(4000),\n    [End Terminal] bigint,\n    [Bike #] bigint,\n    [Subscriber Type] nvarchar(4000),\n    [Zip Code] bigint\n    )\n    WITH (\n    LOCATION = 'RAW/BABS/SmallFiles/201508_trip_data.csv',\n    DATA_SOURCE = [SqlOnDemandDemo],\n    FILE_FORMAT = [SynapseDelimitedTextFormat]\n    );\nGO\n\nSELECT count(*) FROM dbo.trip_data;\n\nSELECT TOP(20) [Start Station], AVG(Duration)\nFROM dbo.trip_data\nGROUP BY [Start Station]\nORDER BY AVG(Duration) DESC;\n\n\nCREATE EXTERNAL TABLE dbo.trip_data_export\n    WITH (\n            LOCATION = 'data/export/avg_duration.csv',\n            DATA_SOURCE = [SqlOnDemandDemo],\n            FILE_FORMAT = [SynapseDelimitedTextFormat]\n    )\n    AS\nSELECT [Start Station], AVG(Duration) AS avg_duration\nFROM dbo.trip_data\nGROUP BY [Start Station];\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "babs",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Spark job definition 1')]",
			"type": "Microsoft.Synapse/workspaces/sparkJobDefinitions",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"targetBigDataPool": {
					"type": "BigDataPoolReference"
				},
				"language": "scala",
				"scanFolder": false,
				"jobProperties": {
					"name": "Spark job definition 1",
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "d807a1cd-7e25-4f9a-822e-ad7e9ceb4616",
						"spark.synapse.context.sjdname": "Spark job definition 1"
					},
					"args": [],
					"jars": [],
					"pyFiles": [
						""
					],
					"files": [],
					"numExecutors": 2
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DeployLab')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "accb5799-141e-4b43-a1c2-0bdbcabb0885"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "python"
					},
					"language_info": {
						"name": "python"
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "markdown",
						"metadata": {
							"application/vnd.databricks.v1+cell": {
								"title": "",
								"showTitle": false,
								"nuid": "813f3758-d14d-4bcf-8eae-a81786dc2556"
							}
						},
						"source": [
							"# Azure Databricks deployment"
						]
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"application/vnd.databricks.v1+cell": {
								"title": "",
								"showTitle": false,
								"nuid": "82c5acf8-d7b4-49bb-8af9-cb2fad032762"
							}
						},
						"source": [
							"This lab starts with a few cells to load data and do some basic visualization. Just run the cells below till you find further instructions."
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"application/vnd.databricks.v1+cell": {
								"title": "",
								"showTitle": false,
								"nuid": "8588d0bb-3f26-486c-9446-c2adefa9d2b2"
							}
						},
						"source": [
							"df = spark.read.csv(\"/databricks-datasets/wine-quality/winequality-red.csv\", header=\"true\", inferSchema\n",
							"                    = \"true\", sep = \";\")\n",
							"for col in df.columns:\n",
							"  df = df.withColumnRenamed(col,col.replace(\" \", \"_\"))\n",
							"df.createOrReplaceTempView(\"wine\")"
						],
						"outputs": [],
						"execution_count": 0
					},
					{
						"cell_type": "code",
						"metadata": {
							"application/vnd.databricks.v1+cell": {
								"title": "",
								"showTitle": false,
								"nuid": "9a62b999-6aed-449c-82ba-3098c2119f8c"
							}
						},
						"source": [
							"df.corr(\"quality\", \"alcohol\")"
						],
						"outputs": [],
						"execution_count": 0
					},
					{
						"cell_type": "code",
						"metadata": {
							"application/vnd.databricks.v1+cell": {
								"title": "",
								"showTitle": false,
								"nuid": "c0459a50-e845-4448-ab54-7eaa8f9db4dd"
							}
						},
						"source": [
							"%sql\n",
							"SELECT * FROM wine"
						],
						"outputs": [],
						"execution_count": 0
					},
					{
						"cell_type": "code",
						"metadata": {
							"application/vnd.databricks.v1+cell": {
								"title": "",
								"showTitle": false,
								"nuid": "82340eae-b17a-44a4-a28c-22b2b5bb24bf"
							}
						},
						"source": [
							"%sql\n",
							"SELECT quality, avg(alcohol) FROM wine GROUP BY quality ORDER BY quality"
						],
						"outputs": [],
						"execution_count": 0
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"application/vnd.databricks.v1+cell": {
								"title": "",
								"showTitle": false,
								"nuid": "8930162e-e2d2-4d5f-a3f5-e45788d56818"
							}
						},
						"source": [
							"As we expected: more alcohol leads to better wine quality ðŸ˜Š"
						]
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"application/vnd.databricks.v1+cell": {
								"title": "",
								"showTitle": false,
								"nuid": "48ddd9bd-71b3-4c12-b5c5-de7c69815bc2"
							}
						},
						"source": [
							"## Lab: create dashboard\n",
							"In the view menu create a dashboard out of this Notebook. Rearrange and resize the cells as you please. Remove a cell from the dashboard, then return back to notebook view (via the view menu): is the cell still in the notebook?\n",
							"Then add a new cell to the notebook with another chart (e.g. copy the above query and change the column over which you create an averaqe). Does this new cell show up in the dashboard? And what if you create a new dashboard, does it show up there?"
						]
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"application/vnd.databricks.v1+cell": {
								"title": "",
								"showTitle": false,
								"nuid": "5731056c-ff11-4669-bee3-c40913e9e28e"
							}
						},
						"source": [
							"## Lab: widgets\n",
							"\n",
							"Run the cell below. Notice the code has a hardcoded value of 4 in there. Create a widget which asks for this value and copy the cell and modify it such that it uses the widget. Optionally see how this behaves in a dashboard."
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"application/vnd.databricks.v1+cell": {
								"title": "",
								"showTitle": false,
								"nuid": "616b263c-c32e-4764-896b-5f826b6f1481"
							}
						},
						"source": [
							"display(df.where(df[\"quality\"] > 4).groupby(\"quality\").avg(\"Alcohol\"))"
						],
						"outputs": [],
						"execution_count": 0
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"application/vnd.databricks.v1+cell": {
								"title": "",
								"showTitle": false,
								"nuid": "679e3a8d-ccbf-45a2-95a6-84466f5af061"
							}
						},
						"source": [
							"## Lab: jobs\n",
							"1. Click the Schedule button in the upper right corner to convert this Notebook into a Job. Schedule it to run very unfrequent.\n",
							"2. Then visit the Jobs tab to see the job definition (it can take a few seconds before you see it)\n",
							"1. Inspect the job. Notice it uses a special Job cluster, but we can control the setting if needed\n",
							"1. Delete the Job after inspection to reduce cost"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"application/vnd.databricks.v1+cell": {
								"title": "",
								"showTitle": false,
								"nuid": "1277b51a-d95b-4010-bacd-580bc613b910"
							}
						},
						"source": [
							""
						],
						"outputs": [],
						"execution_count": 0
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Welcome to Notebooks')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "u2ulabpool",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "cff0c53f-a863-4857-af8b-ff2cab11c761"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/855ebe37-74e1-418a-97e0-8c36e4ed7a34/resourceGroups/cbASACourseLabs/providers/Microsoft.Synapse/workspaces/cb-synpaseworkspace/bigDataPools/u2ulabpool",
						"name": "u2ulabpool",
						"type": "Spark",
						"endpoint": "https://cb-synpaseworkspace.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/u2ulabpool",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.3",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28,
						"automaticScaleJobs": false
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Welcome to Notebooks\r\n",
							"\r\n",
							"Notebooks provide a way to mix text, code and the result of running the code. It forms a sort of logbook of all the things you tried.\r\n",
							"\r\n",
							"It uses Markdown for the text.\r\n",
							"\r\n",
							"You can even including math: $$\\sum_{i=1}^{10} i^2$$"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"1+1"
						],
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"from pyspark.sql import SparkSession \r\n",
							"from pyspark.sql.types import * \r\n",
							"\r\n",
							"# Azure storage access info \r\n",
							"blob_account_name = 'cbu2ubabssourcedata' # replace with your blob name \r\n",
							"blob_container_name = 'u2ulabs' # replace with your container name \r\n",
							"blob_relative_path = 'data/babs/' # replace with your relative folder path \r\n",
							"linked_service_name = 'ls_BABSData' # replace with your linked service name \r\n",
							"\r\n",
							"blob_sas_token = mssparkutils.credentials.getConnectionStringOrCreds(linked_service_name) \r\n",
							"\r\n",
							"# Allow SPARK to access from Blob remotely \r\n",
							"wasbs_path = 'wasbs://%s@%s.blob.core.windows.net/%s' % (blob_container_name, blob_account_name, blob_relative_path) \r\n",
							"spark.conf.set('fs.azure.sas.%s.%s.blob.core.windows.net' % (blob_container_name, blob_account_name), blob_sas_token) \r\n",
							"print('Remote blob path: ' + wasbs_path) \r\n",
							"\r\n",
							"# Read a csv file \r\n",
							"csv_path = wasbs_path + '201508_trip_data.csv' \r\n",
							"df_csv = spark.read.csv(csv_path, header = 'true') \r\n",
							"\r\n",
							"# Read a parquet file \r\n",
							"#parquet_path = wasbs_path + '201508_trip_data.csv' \r\n",
							"#df_parquet = spark.read.parquet(parquet_path) \r\n",
							"\r\n",
							"# Read a json file \r\n",
							"#json_path = wasbs_path + '201508_trip_data.csv' \r\n",
							"#df_json = spark.read.json(json_path) "
						],
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"df_csv.count()"
						],
						"outputs": [],
						"execution_count": 4
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"display(df_csv.head(200))"
						],
						"outputs": [],
						"execution_count": 5
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							}
						},
						"source": [
							"%%sql \r\n",
							"SELECT * FROM df_csv"
						],
						"outputs": [],
						"execution_count": 6
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql \r\n",
							"show databases"
						],
						"outputs": [],
						"execution_count": 7
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"CREATE DATABASE u2ulab;\r\n",
							"SHOW DATABASES;"
						],
						"outputs": [],
						"execution_count": 8
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"spark.catalog.setCurrentDatabase('u2ulab')\r\n",
							"df_csv.createOrReplaceTempView('tripdata')"
						],
						"outputs": [],
						"execution_count": 10
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"USE u2ulab;\r\n",
							"SELECT * from tripdata LIMIT 200"
						],
						"outputs": [],
						"execution_count": 11
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							}
						},
						"source": [
							"%%sql\r\n",
							"SELECT "
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/u2ulabpool')]",
			"type": "Microsoft.Synapse/workspaces/bigDataPools",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"autoPause": {
					"enabled": true,
					"delayInMinutes": 15
				},
				"autoScale": {
					"enabled": false,
					"maxNodeCount": 10,
					"minNodeCount": 3
				},
				"nodeCount": 3,
				"nodeSize": "Small",
				"nodeSizeFamily": "MemoryOptimized",
				"sparkVersion": "3.3",
				"isComputeIsolationEnabled": false,
				"sessionLevelPackagesEnabled": false,
				"annotations": []
			},
			"dependsOn": [],
			"location": "francecentral"
		},
		{
			"name": "[concat(parameters('workspaceName'), '/BabsPool')]",
			"type": "Microsoft.Synapse/workspaces/sqlPools",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"collation": "SQL_Latin1_General_CP1_CI_AS",
				"maxSizeBytes": 263882790666240,
				"annotations": []
			},
			"dependsOn": [],
			"location": "francecentral"
		}
	]
}